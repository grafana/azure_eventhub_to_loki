{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.10.61.36676",
      "templateHash": "8819040794260330687"
    }
  },
  "parameters": {
    "functionAppName": {
      "type": "string",
      "defaultValue": "[format('logexport-{0}', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Specifies a name that is used to generate the Event Hub name and the Namespace name."
      }
    },
    "eventHubName": {
      "type": "string",
      "defaultValue": "logevents",
      "metadata": {
        "description": "Specifies a name for the Event Hub that receives logs."
      }
    },
    "storageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_RAGRS"
      ],
      "metadata": {
        "description": "Storage Account type"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "appInsightsLocation": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for Application Insights"
      }
    },
    "functionAppPlanSku": {
      "type": "string",
      "defaultValue": "EP1",
      "allowedValues": [
        "EP1",
        "EP2",
        "EP3"
      ],
      "metadata": {
        "description": "Specifies the Azure Function hosting plan SKU."
      }
    },
    "eventHubSku": {
      "type": "string",
      "defaultValue": "Standard",
      "allowedValues": [
        "Basic",
        "Standard"
      ],
      "metadata": {
        "description": "Specifies the messaging tier for Event Hub Namespace."
      }
    },
    "packageUri": {
      "type": "string",
      "metadata": {
        "description": "The zip content url."
      }
    },
    "lokiEndpoint": {
      "type": "string",
      "metadata": {
        "description": "The root URL of the Loki instance to send logs to."
      }
    },
    "lokiUsername": {
      "type": "string",
      "metadata": {
        "description": "The optional username to use for authentication with Loki."
      }
    },
    "lokiPassword": {
      "type": "securestring",
      "metadata": {
        "description": "The optional password to use for authentication with Loki."
      }
    }
  },
  "variables": {
    "applicationInsightsName": "[parameters('functionAppName')]",
    "hostingPlanName": "[parameters('functionAppName')]",
    "eventHubAuthorizationRuleName": "[parameters('functionAppName')]",
    "eventHubName": "[parameters('eventHubName')]",
    "eventHubNamespaceName": "[parameters('functionAppName')]",
    "storageAccountName": "[format('logexport{0}', uniqueString(resourceGroup().id))]"
  },
  "resources": [
    {
      "type": "Microsoft.EventHub/namespaces",
      "apiVersion": "2021-11-01",
      "name": "[variables('eventHubNamespaceName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[parameters('eventHubSku')]",
        "tier": "[parameters('eventHubSku')]",
        "capacity": 1
      },
      "properties": {
        "isAutoInflateEnabled": false,
        "maximumThroughputUnits": 0
      }
    },
    {
      "type": "Microsoft.EventHub/namespaces/eventhubs",
      "apiVersion": "2021-11-01",
      "name": "[format('{0}/{1}', variables('eventHubNamespaceName'), variables('eventHubName'))]",
      "properties": {
        "messageRetentionInDays": 7,
        "partitionCount": 1,
        "messageTimestampDescription": {
          "timestampType": "LogAppend"
        }
      },
      "resources": [
        {
          "type": "authorizationRules",
          "apiVersion": "2017-04-01",
          "name": "[variables('eventHubAuthorizationRuleName')]",
          "properties": {
            "rights": [
              "Listen"
            ]
          },
          "dependsOn": [
            "[resourceId('Microsoft.EventHub/namespaces/eventhubs', variables('eventHubNamespaceName'), variables('eventHubName'))]"
          ]
        }
      ],
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubNamespaceName'))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2022-05-01",
      "name": "[variables('storageAccountName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[parameters('storageAccountType')]"
      },
      "kind": "Storage"
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2022-03-01",
      "name": "[variables('hostingPlanName')]",
      "location": "[parameters('location')]",
      "sku": {
        "tier": "ElasticPremium",
        "name": "[parameters('functionAppPlanSku')]",
        "family": "EP"
      },
      "properties": {
        "maximumElasticWorkerCount": 20,
        "reserved": true
      },
      "kind": "elastic"
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[variables('applicationInsightsName')]",
      "location": "[parameters('appInsightsLocation')]",
      "tags": {
        "[format('hidden-link:{0}', resourceId('Microsoft.Web/sites', variables('applicationInsightsName')))]": "Resource"
      },
      "properties": {
        "Application_Type": "web"
      },
      "kind": "web"
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2022-03-01",
      "name": "[parameters('functionAppName')]",
      "location": "[parameters('location')]",
      "kind": "functionapp,linux",
      "properties": {
        "reserved": true,
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "siteConfig": {
          "linuxFxVersion": "python|3.11",
          "appSettings": [
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName')), '2020-02-02').InstrumentationKey]"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2022-05-01').keys[0].value)]"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2022-05-01').keys[0].value)]"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "[toLower(parameters('functionAppName'))]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~4"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "python"
            },
            {
              "name": "WEBSITE_NODE_DEFAULT_VERSION",
              "value": "~14"
            },
            {
              "name": "WEBSITE_RUN_FROM_PACKAGE",
              "value": "1"
            },
            {
              "name": "LOKI_ENDPOINT",
              "value": "[parameters('lokiEndpoint')]"
            },
            {
              "name": "LOKI_USERNAME",
              "value": "[parameters('lokiUsername')]"
            },
            {
              "name": "LOKI_PASSWORD",
              "value": "[parameters('lokiPassword')]"
            },
            {
              "name": "EVENTHUB_NAME",
              "value": "[variables('eventHubName')]"
            },
            {
              "name": "EVENTHUB_CONNECTION",
              "value": "[listKeys(resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', variables('eventHubNamespaceName'), variables('eventHubName'), variables('eventHubAuthorizationRuleName')),'2015-08-01').primaryConnectionString]"
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs/', variables('eventHubNamespaceName'), variables('eventHubName'))]",
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', variables('eventHubNamespaceName'), variables('eventHubName'), variables('eventHubAuthorizationRuleName'))]",
        "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/sites/extensions",
      "apiVersion": "2022-03-01",
      "name": "[format('{0}/{1}', parameters('functionAppName'), 'zipdeploy')]",
      "properties": {
        "packageUri": "[parameters('packageUri')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]"
      ]
    }
  ],
  "outputs": {
    "eventHubID": {
      "type": "string",
      "value": "[resourceId('Microsoft.EventHub/namespaces/eventhubs/', variables('eventHubNamespaceName'), variables('eventHubName'))]"
    },
    "eventHubName": {
      "type": "string",
      "value": "[variables('eventHubName')]"
    },
    "eventHubNamespace": {
      "type": "string",
      "value": "[variables('eventHubNamespaceName')]"
    }
  }
}
